#!/bin/sh

# ----------------------------------------------------------------------
# table
# Create an HTML table from a simple text input format. 
# ----------------------------------------------------------------------
#
# The input consists of a list of blocks (see block_sort).
# The first block gives the headers. Each of the second and
# subseqent blocks provides the rows.
#
# For example, try this on the command line:
#
# echo 'Month
# Days
# 
# January
# 31
# 
# February
# 28
#
# March
# 31' | table > months.html
#
# You can manipulate tables using reorder, lines, blocks, and
# block_sort. For example:
#
#   - 'lines | grep January | blocks' is a simple filter
#
#   - 'reorder 1' selects just column 1
#
#   - 'reorder 2 1 | block_sort | reorder 1 2' sorts by column 2
#
# ----------------------------------------------------------------------

usage() {
  echo 'usage: table -v' >&2
  echo '       table [-c color] [-t title] [-w width]' >&2
  exit 1
}

width=1
color=skyblue
title=""

while :; do
  case $1 in
    -v|--version)
      echo 'table version 1.0'
      exit 0 ;;
    -c)
      color=$2
      shift ;;
    -t)
      title=$2
      shift ;;
    -w)
      width=$2
      shift ;;
    --)
      shift
      break ;;
    -?*)
      usage ;;
    *)
      break ;;
  esac
  shift
done


awk 'BEGIN {
  RS=""; FS="\n"
  print "<HTML>"
  print "<BODY>"
  print "<TABLE>"
  width='$width'
  title="'"$title"'"
  if (title != "") {
    printf("<H1>%s</H1>\n", title)
    print ""
  }
}

NR == 1 { nfields = NF }

{ 
  if (NR > 1 && ((NR - 2) % (2*width)) < width)
    printf("<TR BGCOLOR=\"'$color'\">")
  else
    printf("<TR>")
  for (i = 1; i <= nfields; ++i) {
    if ($i == "~") $i = ""
    if (NR == 1)
      printf("<TH>%s", $i)
    else
      printf("<TD>%s", $i)
  }
  print ""
}

END {
  print "</TABLE>"
  print "</BODY>"
  print "</HTML>"
}'
